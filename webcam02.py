import os
import time
from datetime import datetime

import cv2
import torch
import pandas as pd
from PIL import Image, ImageTk, ImageDraw, ImageFont

import tkinter as tk
from tkinter import ttk, messagebox, font
from tkinter.scrolledtext import ScrolledText

# =============== C·∫§U H√åNH FILE ===============
SCAN_FILE = "scan_log.xlsx"      # Excel th·ªëng k√™ qu√©t (c√≥ l·ªãch s·ª≠ nhi·ªÅu ng√†y)
REGISTER_FILE = "registered.txt" # Danh s√°ch ƒëƒÉng k√Ω (TXT)

os.makedirs(os.path.dirname(SCAN_FILE) or ".", exist_ok=True)
os.makedirs(os.path.dirname(REGISTER_FILE) or ".", exist_ok=True)

# Kh·ªüi t·∫°o file excel n·∫øu ch∆∞a c√≥
if not os.path.exists(SCAN_FILE):
    pd.DataFrame(columns=["Ng√†y", "Bi·ªÉn s·ªë", "Tr·∫°ng th√°i", "Th·ªùi gian v√†o", "Th·ªùi gian ra"]).to_excel(SCAN_FILE, index=False)
# Kh·ªüi t·∫°o file txt n·∫øu ch∆∞a c√≥
if not os.path.exists(REGISTER_FILE):
    open(REGISTER_FILE, "w", encoding="utf-8").close()

# =============== H√ÄM CHU·∫®N H√ìA BI·ªÇN S·ªê ===============
def normalize_plate(s: str) -> str:
    if not isinstance(s, str):
        s = str(s)
    s = s.upper().strip()
    # b·ªè kho·∫£ng tr·∫Øng, g·∫°ch n·ªëi, g·∫°ch d∆∞·ªõi, ch·∫•m
    for ch in [" ", "-", "_", ".", "‚Äì", "‚Äî"]:
        s = s.replace(ch, "")
    return s

# =============== ƒêƒÇNG K√ù: TXT ===============
def load_registered_set() -> set:
    plates = set()
    with open(REGISTER_FILE, "r", encoding="utf-8") as f:
        for line in f:
            plate = line.strip()
            if plate:
                plates.add(normalize_plate(plate))
    return plates

def append_registered(plate_raw: str) -> bool:
    plate_norm = normalize_plate(plate_raw)
    reg = load_registered_set()
    if plate_norm in reg:
        return False
    with open(REGISTER_FILE, "a", encoding="utf-8") as f:
        f.write(plate_raw.strip().upper() + "\n")
    return True

def read_registered_list() -> list:
    items = []
    with open(REGISTER_FILE, "r", encoding="utf-8") as f:
        for line in f:
            p = line.strip()
            if p:
                items.append(p)
    return items

# =============== L∆ØU SCAN: EXCEL ===============
def save_scan_to_excel(plate_raw: str, status_text: str):
    """Ghi v√†o Excel:
       - N·∫øu c√πng NG√ÄY v√† bi·ªÉn s·ªë ƒë√£ c√≥ -> c·∫≠p nh·∫≠t 'Th·ªùi gian ra' (n·∫øu ƒëang tr·ªëng)
       - N·∫øu ch∆∞a c√≥ -> th√™m d√≤ng m·ªõi v·ªõi 'Th·ªùi gian v√†o' hi·ªán t·∫°i
    """
    today = datetime.now().strftime("%Y-%m-%d")
    now_time = datetime.now().strftime("%H:%M:%S")
    plate_norm = normalize_plate(plate_raw)

    df = pd.read_excel(SCAN_FILE)

    # L·ªçc c√πng ng√†y & c√πng bi·ªÉn s·ªë (so kh·ªõp sau khi normalize)
    # T·∫°o c·ªôt ph·ª• normalized ƒë·ªÉ d√≤ (kh√¥ng l∆∞u v√†o file)
    if "normalized" not in df.columns:
        df["normalized"] = df["Bi·ªÉn s·ªë"].astype(str).apply(normalize_plate)
    else:
        df["normalized"] = df["Bi·ªÉn s·ªë"].astype(str).apply(normalize_plate)

    # T·ªìn t·∫°i record c√πng ng√†y & ch∆∞a c√≥ th·ªùi gian ra? -> c·∫≠p nh·∫≠t ra
    mask = (df["Ng√†y"] == today) & (df["normalized"] == plate_norm)
    if mask.any():
        idxs = df[mask].index.tolist()
        updated = False
        for idx in idxs:
            if pd.isna(df.at[idx, "Th·ªùi gian ra"]) or df.at[idx, "Th·ªùi gian ra"] in [None, "", "nan"]:
                df.at[idx, "Th·ªùi gian ra"] = now_time
                updated = True
                break
        if not updated:
            # ƒë√£ c√≥ b·∫£n ghi v√†o/ra ƒë·∫ßy ƒë·ªß -> th√™m b·∫£n ghi m·ªõi (l·∫ßn v√†o ti·∫øp theo)
            new_row = {
                "Ng√†y": today,
                "Bi·ªÉn s·ªë": plate_raw.upper(),
                "Tr·∫°ng th√°i": status_text,
                "Th·ªùi gian v√†o": now_time,
                "Th·ªùi gian ra": None
            }
            df = pd.concat([df, pd.DataFrame([new_row])], ignore_index=True)
    else:
        # ch∆∞a c√≥ -> th√™m b·∫£n ghi m·ªõi (xe v√†o)
        new_row = {
            "Ng√†y": today,
            "Bi·ªÉn s·ªë": plate_raw.upper(),
            "Tr·∫°ng th√°i": status_text,
            "Th·ªùi gian v√†o": now_time,
            "Th·ªùi gian ra": None
        }
        df = pd.concat([df, pd.DataFrame([new_row])], ignore_index=True)

    # X√≥a c·ªôt ph·ª• r·ªìi l∆∞u
    if "normalized" in df.columns:
        df = df.drop(columns=["normalized"])
    df.to_excel(SCAN_FILE, index=False)

def read_today_scans() -> pd.DataFrame:
    today = datetime.now().strftime("%Y-%m-%d")
    if not os.path.exists(SCAN_FILE):
        return pd.DataFrame(columns=["Ng√†y", "Bi·ªÉn s·ªë", "Tr·∫°ng th√°i", "Th·ªùi gian v√†o", "Th·ªùi gian ra"])
    df = pd.read_excel(SCAN_FILE)
    if df.empty:
        return df
    return df[df["Ng√†y"] == today].copy()

# =============== YOLO MODEL (thay ƒë∆∞·ªùng d·∫´n c·ªßa b·∫°n) ===============
# L∆∞u √Ω: c·∫ßn c√≥ 'yolov5' s·∫µn (local hub), v√† 2 file weight theo d·ª± √°n c·ªßa b·∫°n
# - model/LP_detector_nano_61.pt  (detect bi·ªÉn s·ªë)
# - model/LP_ocr_nano_62.pt       (OCR bi·ªÉn s·ªë)
try:
    yolo_LP_detect = torch.hub.load('yolov5', 'custom', path='model/LP_detector_nano_61.pt', force_reload=False, source='local')
    yolo_license_plate = torch.hub.load('yolov5', 'custom', path='model/LP_ocr_nano_62.pt', force_reload=False, source='local')
    yolo_license_plate.conf = 0.60
except Exception as e:
    yolo_LP_detect = None
    yolo_license_plate = None
    print("‚ö†Ô∏è Kh√¥ng load ƒë∆∞·ª£c YOLO models:", e)

# =============== HELPER D·ª∞ √ÅN (deskew + read_plate) ===============
# B·∫°n ƒë√£ c√≥ 2 module n√†y trong project g·ªëc
import function.utils_rotate as utils_rotate
import function.helper as helper

# =============== ·ª®NG D·ª§NG TKINTER ===============
LOGIN_USER = "admin"
LOGIN_PASS = "123456"

COOLDOWN_SECONDS = 5  # tr√°nh ghi tr√πng trong kho·∫£ng th·ªùi gian ng·∫Øn
recent_seen = {}      # plate_norm -> last_time (epoch)
SCAN_DISPLAY_TIME = 1.8  # th·ªùi gian hi·ªÉn th·ªã bi·ªÉn s·ªë (t√≠nh b·∫±ng gi√¢y)

# T·∫°o c√°c t√πy ch·ªânh ki·ªÉu d√°ng
style = ttk.Style()
style.configure("TFrame", background="#f5f5f5")
style.configure("TButton", padding=6, relief="flat", background="#3498db", font=("Arial", 10))
style.map("TButton", foreground=[('pressed', 'white'), ('active', 'white')])
style.configure("TLabel", background="#f5f5f5", font=("Arial", 10))
style.configure("Treeview", background="#ffffff", fieldbackground="#ffffff", rowheight=25)
style.configure("Treeview.Heading", background="#34495e", foreground="white", font=("Arial", 10, "bold"))
style.configure("Tab", padding=[12, 8, 12, 8])
style.map("Notebook.Tab", background=[("selected", "#3498db")], foreground=[("selected", "white")])

class App(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("H·ªá th·ªëng ƒëi·ªÉm danh xe")
        self.geometry("1100x750")
        self.resizable(False, False)
        
        # Thi·∫øt l·∫≠p font
        heading_font = font.nametofont("TkHeadingFont")
        heading_font.configure(family="Arial", size=12, weight="bold")

        # Kh·ªüi t·∫°o ƒëƒÉng nh·∫≠p tr∆∞·ªõc
        self._build_login()

        # Bi·∫øn camera
        self.cap = None
        self.prev_frame_time = 0
        self.registered_set = load_registered_set()
        self.camera_update_interval = 100  # ms, tƒÉng t·ª´ 10ms ƒë·ªÉ gi·∫£m t·ªën t√†i nguy√™n
        self.last_plate_detection = None
        self.plate_start_time = None
        self.current_plate_detection = None
        
        # Flag to check if UI components are initialized
        self.ui_initialized = False

    # --------- LOGIN ---------
    def _build_login(self):
        # T·∫°o n·ªÅn gradient
        self.canvas = tk.Canvas(self, width=1100, height=750, highlightthickness=0)
        self.canvas.pack(fill="both", expand=True)
        
        # T·∫°o m√†u gradient
        for i in range(10):
            # S√°ng d·∫ßn t·ª´ tr√™n xu·ªëng d∆∞·ªõi
            color_val = 255 - i*25
            if color_val < 200: color_val = 200
            color = f'#{color_val:02x}{color_val:02x}{color_val:02x}'
            self.canvas.create_rectangle(0, i*75, 1100, (i+1)*75, fill=color, outline=color)
        
        # Logo v√† form ƒëƒÉng nh·∫≠p
        logo_frame = tk.Frame(self, bg="#f5f5f5")
        logo_frame.place(relx=0.5, rely=0.2, anchor="center")
        
        # T·∫£i v√† hi·ªÉn th·ªã logo
        try:
            logo = Image.open("logo.png")  # C√≥ th·ªÉ thay th·∫ø b·∫±ng file logo th·ª±c t·∫ø
            logo = logo.resize((150, 150), Image.LANCZOS)
            logo_photo = ImageTk.PhotoImage(logo)
            logo_label = tk.Label(logo_frame, image=logo_photo, bg="#f5f5f5")
            logo_label.image = logo_photo  # Gi·ªØ tham chi·∫øu
            logo_label.pack(pady=10)
        except:
            # N·∫øu kh√¥ng c√≥ file logo, hi·ªÉn th·ªã bi·ªÉu t∆∞·ª£ng vƒÉn b·∫£n
            tk.Label(logo_frame, text="üöó", font=("Arial", 80), bg="#f5f5f5").pack(pady=10)
        
        tk.Label(logo_frame, text="H·ªÜ TH·ªêNG ƒêI·ªÇM DANH XE", 
                font=("Arial", 18, "bold"), bg="#f5f5f5", fg="#2c3e50").pack(pady=5)
        
        # Form ƒëƒÉng nh·∫≠p
        login_container = tk.Frame(self, bg="white", relief="flat", bd=0)
        login_container.place(relx=0.5, rely=0.5, anchor="center")
        
        login_container_frame = tk.Frame(login_container, bg="white", relief="ridge", bd=2, padx=40, pady=40)
        login_container_frame.pack(padx=10, pady=10)
        
        tk.Label(login_container_frame, text="ƒêƒÉng nh·∫≠p", 
                font=("Arial", 20, "bold"), bg="white", fg="#2c3e50").grid(row=0, column=0, columnspan=2, pady=20)
        
        tk.Label(login_container_frame, text="T√†i kho·∫£n", font=("Arial", 12), bg="white", fg="#34495e").grid(row=1, column=0, padx=8, pady=8, sticky="e")
        tk.Label(login_container_frame, text="M·∫≠t kh·∫©u", font=("Arial", 12), bg="white", fg="#34495e").grid(row=2, column=0, padx=8, pady=8, sticky="e")
        
        self.var_user = tk.StringVar()
        self.var_pass = tk.StringVar()
        
        e1 = tk.Entry(login_container_frame, textvariable=self.var_user, font=("Arial", 12), width=26)
        e2 = tk.Entry(login_container_frame, textvariable=self.var_pass, font=("Arial", 12), show="*", width=26)
        e1.grid(row=1, column=1, padx=8, pady=8)
        e2.grid(row=2, column=1, padx=8, pady=8)
        
        login_btn = tk.Button(login_container_frame, text="ƒêƒÉng nh·∫≠p", 
                            font=("Arial", 12, "bold"), bg="#27ae60", fg="white",
                            width=16, height=2, command=self._do_login)
        login_btn.grid(row=3, column=0, columnspan=2, pady=20)
        
        # Th√™m vƒÉn b·∫£n b·∫£n quy·ªÅn
        tk.Label(login_container_frame, text="¬© 2023 H·ªá th·ªëng ƒëi·ªÉm danh xe", 
                font=("Arial", 8), bg="white", fg="#95a5a6").grid(row=4, column=0, columnspan=2, pady=10)

    def _do_login(self):
        if self.var_user.get() == LOGIN_USER and self.var_pass.get() == LOGIN_PASS:
            # ƒêƒÉng nh·∫≠p OK -> chuy·ªÉn sang main UI
            self.canvas.destroy()
            container = tk.Frame(self, bg="#f5f5f5")
            container.pack(fill="both", expand=True)
            
            # X√¢y d·ª±ng giao di·ªán ch√≠nh trong container m·ªõi
            self.notebook = ttk.Notebook(container)
            self.notebook.pack(fill="both", expand=True)
            
            # Tab 1: Camera
            self.tab_camera = ttk.Frame(self.notebook)
            self.notebook.add(self.tab_camera, text="Camera qu√©t xe")
            self._build_tab_camera()
            
            # Tab 2: Danh s√°ch qu√©t h√¥m nay
            self.tab_today = ttk.Frame(self.notebook)
            self.notebook.add(self.tab_today, text="Danh s√°ch qu√©t h√¥m nay")
            self._build_tab_today()
            
            # Tab 3: ƒêƒÉng k√Ω xe
            self.tab_register = ttk.Frame(self.notebook)
            self.notebook.add(self.tab_register, text="ƒêƒÉng k√Ω xe")
            self._build_tab_register()
            
            # Set UI initialized flag to True
            self.ui_initialized = True
        else:
            messagebox.showerror("L·ªói", "Sai t√†i kho·∫£n ho·∫∑c m·∫≠t kh·∫©u!")

    # --------- MAIN UI (NOTEBOOK) ---------
    def _build_tab_camera(self):
        # Header
        header = tk.Frame(self.tab_camera, bg="white", height=80)
        header.pack(fill="x", padx=10, pady=10)
        header.pack_propagate(False)
        
        tk.Label(header, text="Camera qu√©t xe", font=("Arial", 16, "bold"), 
                bg="white", fg="#2c3e50").pack(expand=True)
        
        # Khung hi·ªÉn th·ªã camera
        camera_container = tk.Frame(self.tab_camera, bg="black", relief="ridge", bd=2)
        camera_container.pack(padx=10, pady=10, fill="both", expand=True)
        
        self.lbl_video = tk.Label(camera_container, bd=0, bg="black")
        self.lbl_video.pack(fill="both", expand=True)
        
        # Th√™m √¥ hi·ªÉn th·ªã bi·ªÉn s·ªë ƒëang nh·∫≠n di·ªán
        self.plate_info_frame = tk.Frame(self.tab_camera, height=60, bg="#ecf0f1", relief="ridge", bd=2)
        self.plate_info_frame.pack(fill="x", padx=10, pady=5)
        self.plate_info_frame.pack_propagate(False)
        
        self.lbl_plate_info = tk.Label(self.plate_info_frame, text="", 
                                      font=("Arial", 18, "bold"), bg="#ecf0f1", fg="#2c3e50")
        self.lbl_plate_info.pack(expand=True)
        
        # Status line
        self.status_bar = tk.Frame(self.tab_camera, bg="#34495e", height=35)
        self.status_bar.pack(fill="x", padx=10, pady=5)
        self.status_bar.pack_propagate(False)
        
        self.lbl_status = tk.Label(self.status_bar, text="Tr·∫°ng th√°i: S·∫µn s√†ng", 
                                  font=("Arial", 10), bg="#34495e", fg="white", anchor="w")
        self.lbl_status.pack(fill="x", padx=10, pady=5)
        
        # N√∫t ƒëi·ªÅu khi·ªÉn
        controls = tk.Frame(self.tab_camera, bg="#f5f5f5")
        controls.pack(pady=15, padx=10, fill="x")
        
        # D√πng m√†u s·∫Øc v√† font r√µ r√†ng h∆°n
        tk.Button(controls, text="B·∫≠t camera", width=16, height=2, 
                 command=self.start_camera, bg="#27ae60", fg="white", 
                 font=("Arial", 11, "bold")).pack(side="left", padx=8)
        
        tk.Button(controls, text="T·∫Øt camera", width=16, height=2, 
                 command=self.stop_camera, bg="#e74c3c", fg="white", 
                 font=("Arial", 11, "bold")).pack(side="left", padx=8)
        
        tk.Button(controls, text="L√†m m·ªõi DS ƒëƒÉng k√Ω", width=18, height=2, 
                 command=self._refresh_registered_cache, bg="#3498db", fg="white", 
                 font=("Arial", 11, "bold")).pack(side="left", padx=8)
        
        # Th√™m th√¥ng tin c·∫•u h√¨nh
        config_frame = tk.Frame(self.tab_camera, bg="#f5f5f5")
        config_frame.pack(fill="x", padx=10, pady=5)
        
        tk.Label(config_frame, text="C·∫•u h√¨nh: Th·ªùi gian hi·ªÉn th·ªã bi·ªÉn s·ªë: 1.8 gi√¢y", 
                font=("Arial", 10), bg="#f5f5f5", fg="#7f8c8d").pack(anchor="w")

    def _refresh_registered_cache(self):
        self.registered_set = load_registered_set()
        messagebox.showinfo("Th√¥ng b√°o", "ƒê√£ t·∫£i l·∫°i danh s√°ch ƒëƒÉng k√Ω (TXT).")

    def start_camera(self):
        if yolo_LP_detect is None or yolo_license_plate is None:
            messagebox.showerror("L·ªói", "Model YOLO ch∆∞a s·∫µn s√†ng!")
            return
        if self.cap is None:
            self.cap = cv2.VideoCapture(0, cv2.CAP_DSHOW)
            if not self.cap.isOpened():
                self.cap.release()
                self.cap = None
                messagebox.showerror("L·ªói", "Kh√¥ng m·ªü ƒë∆∞·ª£c camera!")
                return
        self.lbl_status.config(text="Tr·∫°ng th√°i: Camera ƒëang ch·∫°y (nh·∫•n T·∫Øt camera ƒë·ªÉ d·ª´ng)")
        self._update_frame()

    def stop_camera(self):
        # Only access UI components if they exist
        if hasattr(self, 'lbl_status'):
            self.lbl_status.config(text="Tr·∫°ng th√°i: ƒê√£ t·∫Øt camera")
        if self.cap is not None:
            self.cap.release()
            self.cap = None
        if hasattr(self, 'lbl_video'):
            self.lbl_video.config(image="")
        if hasattr(self, 'lbl_plate_info'):
            self.lbl_plate_info.config(text="")

    def _update_frame(self):
        if self.cap is None:
            return

        ok, frame = self.cap.read()
        if not ok:
            self.stop_camera()
            return

        # YOLO detect bi·ªÉn s·ªë
        plates = yolo_LP_detect(frame, size=416)
        list_plates = plates.pandas().xyxy[0].values.tolist()
        
        plate_detected = False
        
        for plate in list_plates:
            x1, y1, x2, y2 = map(int, plate[:4])
            crop_img = frame[y1:y2, x1:x2]
            cv2.rectangle(frame, (x1, y1), (x2, y2), (0, 0, 225), 2)

            # OCR v√† deskew th·ª≠ v√†i h∆∞·ªõng
            found_text = None
            for cc in range(2):
                for ct in range(2):
                    lp_text = helper.read_plate(yolo_license_plate, utils_rotate.deskew(crop_img, cc, ct))
                    if lp_text and lp_text != "unknown":
                        found_text = lp_text
                        break
                if found_text:
                    break

            if found_text:
                plate_detected = True
                plate_norm = normalize_plate(found_text)
                # cooldown ƒë·ªÉ tr√°nh spam
                now = time.time()
                last = recent_seen.get(plate_norm, 0)
                if now - last >= COOLDOWN_SECONDS:
                    recent_seen[plate_norm] = now

                    is_registered = plate_norm in self.registered_set
                    status_text = "ƒê·∫†T" if is_registered else "KH√îNG ƒê·∫†T"
                    color = (0, 255, 0) if is_registered else (0, 0, 255)

                    # L∆∞u Excel (v√†o/ra)
                    save_scan_to_excel(found_text, "ƒê√É ƒêƒÇNG K√ù" if is_registered else "CH∆ØA ƒêƒÇNG K√ù")

                    # L∆∞u th√¥ng tin bi·ªÉn s·ªë
                    self.current_plate_detection = found_text
                    self.last_plate_detection = now
                    self.plate_start_time = now
                    
                    # C·∫≠p nh·∫≠t th√¥ng tin bi·ªÉn s·ªë
                    plate_color = "#27ae60" if is_registered else "#e74c3c"
                    self.lbl_plate_info.config(
                        text=f"Bi·ªÉn s·ªë: {found_text} ({status_text})",
                        fg=plate_color
                    )

                    # V·∫Ω label tr√™n ·∫£nh
                    cv2.putText(frame, f"{found_text} ({status_text})", (x1, max(25, y1 - 10)),
                                cv2.FONT_HERSHEY_SIMPLEX, 0.9, color, 2)
        
        # Ki·ªÉm tra v√† x√≥a th√¥ng tin bi·ªÉn s·ªë sau th·ªùi gian hi·ªÉn ƒë·ªãnh
        if plate_detected:
            if time.time() - self.plate_start_time >= SCAN_DISPLAY_TIME:
                self.lbl_plate_info.config(text="")
        else:
            if time.time() - self.last_plate_detection >= SCAN_DISPLAY_TIME:
                self.lbl_plate_info.config(text="")

        # FPS
        new_t = time.time()
        fps = 0 if self.prev_frame_time == 0 else 1 / (new_t - self.prev_frame_time)
        self.prev_frame_time = new_t
        cv2.putText(frame, f"FPS: {int(fps)}", (7, 35), cv2.FONT_HERSHEY_SIMPLEX, 1, (100, 255, 0), 2)

        # Hi·ªÉn th·ªã l√™n Tkinter
        frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
        im = Image.fromarray(frame_rgb)
        
        # ƒê·∫£m b·∫£o t·ª∑ l·ªá khung h√¨nh
        video_height = 480
        ratio = video_height / im.height
        new_width = int(im.width * ratio)
        new_height = video_height
        im = im.resize((new_width, new_height), Image.LANCZOS)
        
        imgtk = ImageTk.PhotoImage(image=im)
        self.lbl_video.imgtk = imgtk
        self.lbl_video.configure(image=imgtk)

        # TƒÉng th·ªùi gian c·∫≠p nh·∫≠t frame ƒë·ªÉ gi·∫£m t·ªën t√†i nguy√™n
        self.after(self.camera_update_interval, self._update_frame)

    # ---- Tab Danh s√°ch h√¥m nay ----
    def _build_tab_today(self):
        # Header
        header = tk.Frame(self.tab_today, bg="white", height=80)
        header.pack(fill="x", padx=10, pady=10)
        header.pack_propagate(False)
        
        tk.Label(header, text="Danh s√°ch qu√©t h√¥m nay", font=("Arial", 16, "bold"), 
                bg="white", fg="#2c3e50").pack(expand=True)
        
        # Thanh c√¥ng c·ª•
        toolbar = tk.Frame(self.tab_today, bg="white", height=50)
        toolbar.pack(fill="x", padx=10, pady=(0, 10))
        
        tk.Button(toolbar, text="L√†m m·ªõi", width=12, height=2, 
                 command=self.reload_today_table, bg="#3498db", fg="white", 
                 font=("Arial", 10, "bold")).pack(side="left", padx=5, pady=5)
        
        tk.Label(toolbar, text="(D·ªØ li·ªáu l·∫•y t·ª´ Excel)", 
                font=("Arial", 10), bg="white", fg="#7f8c8d").pack(side="left", padx=10)
        
        # T·∫°o thanh cu·ªôn t√πy ch·ªânh
        canvas = tk.Canvas(self.tab_today, bg="white")
        scrollbar = ttk.Scrollbar(self.tab_today, orient="vertical", command=canvas.yview)
        scrollable_frame = tk.Frame(canvas, bg="white")
        
        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )
        
        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)
        
        canvas.pack(side="left", fill="both", expand=True, padx=10, pady=(0, 10))
        scrollbar.pack(side="right", fill="y", padx=(0, 10))
        
        cols = ("Ng√†y", "Bi·ªÉn s·ªë", "Tr·∫°ng th√°i", "Th·ªùi gian v√†o", "Th·ªùi gian ra")
        
        # T·∫°o header
        header_frame = tk.Frame(scrollable_frame, bg="#34495e", height=40)
        header_frame.pack(fill="x")
        
        for i, c in enumerate(cols):
            label = tk.Label(header_frame, text=c, 
                           font=("Arial", 11, "bold"), 
                           bg="#34495e", fg="white",
                           width=20 if i == 1 else 15,
                           anchor="center")
            label.grid(row=0, column=i, padx=2, pady=2, sticky="ew")
        
        # T·∫°o Treeview inner ƒë·ªÉ keep styling consistent
        self.tree_inner_frame = tk.Frame(scrollable_frame)
        self.tree_inner_frame.pack(fill="both", expand=True)
        
        self.tree_today = ttk.Treeview(self.tree_inner_frame, columns=cols, show="headings", height=15)
        for c in cols:
            self.tree_today.heading(c, text=c)
            self.tree_today.column(c, anchor="center", width=160 if c == "Bi·ªÉn s·ªë" else 130)
        
        # ƒê·∫∑t Treeview trong frame v·ªõi background m√†u tr·∫Øng
        tree_container = tk.Frame(self.tree_inner_frame, highlightthickness=0)
        tree_container.pack(fill="both", expand=True)
        self.tree_today.pack(tree_container)
        
        self.reload_today_table()

    def reload_today_table(self):
        # X√≥a c√°c h√†ng hi·ªán c√≥
        for item in self.tree_today.get_children():
            self.tree_today.delete(item)
        
        # ƒê·ªçc v√† hi·ªÉn th·ªã l·∫°i d·ªØ li·ªáu
        df = read_today_scans()
        for _, row in df.iterrows():
            values = [row.get("Ng√†y",""), row.get("Bi·ªÉn s·ªë",""), 
                     row.get("Tr·∫°ng th√°i",""), row.get("Th·ªùi gian v√†o",""), 
                     row.get("Th·ªùi gian ra","")]
            
            # T√πy ch·ªânh m√†u s·∫Øc cho c√°c h√†ng
            if row.get("Tr·∫°ng th√°i","") == "ƒê√É ƒêƒÇNG K√ù":
                tags = ("approved",)
            else:
                tags = ("not_approved",)
            
            self.tree_today.insert("", "end", values=values, tags=tags)
        
        # √Åp d·ª•ng style cho c√°c tag
        self.tree_today.tag_configure("approved", background="#e8f8f5")
        self.tree_today.tag_configure("not_approved", background="#fdedec")

    # ---- Tab ƒêƒÉng k√Ω xe ----
    def _build_tab_register(self):
        # Header
        header = tk.Frame(self.tab_register, bg="white", height=80)
        header.pack(fill="x", padx=10, pady=10)
        header.pack_propagate(False)
        
        tk.Label(header, text="ƒêƒÉng k√Ω xe", font=("Arial", 16, "bold"), 
                bg="white", fg="#2c3e50").pack(expand=True)
        
        # Form ƒëƒÉng k√Ω
        form = tk.Frame(self.tab_register, bg="white", height=80, relief="ridge", bd=2)
        form.pack(fill="x", padx=10, pady=(0, 10))
        form.pack_propagate(False)
        
        tk.Label(form, text="Nh·∫≠p bi·ªÉn s·ªë c·∫ßn ƒëƒÉng k√Ω:", 
                font=("Arial", 12), bg="white", fg="#34495e",
                padx=20, pady=20).pack(side="left")
        
        self.entry_reg = tk.Entry(form, width=24, font=("Arial", 12), bd=2)
        self.entry_reg.pack(side="left", padx=10)
        
        tk.Button(form, text="Th√™m", width=10, height=2, 
                 command=self._add_registered_plate, bg="#27ae60", fg="white",
                 font=("Arial", 10, "bold")).pack(side="left", padx=6)
        
        tk.Button(form, text="L√†m m·ªõi danh s√°ch", width=14, height=2, 
                 command=self._reload_registered_table, bg="#3498db", fg="white",
                 font=("Arial", 10, "bold")).pack(side="left", padx=6)
        
        # Thanh c√¥ng c·ª• b√™n d∆∞·ªõi
        toolbar = tk.Frame(self.tab_register, bg="white", height=50)
        toolbar.pack(fill="x", padx=10, pady=(0, 10))
        
        # N√∫t x√≥a ƒë√£ ch·ªçn
        tk.Button(toolbar, text="X√≥a ƒë√£ ch·ªçn", width=12, height=2, 
                 command=self._delete_selected_plates, bg="#e74c3c", fg="white",
                 font=("Arial", 10, "bold")).pack(side="left", padx=5, pady=5)
        
        # Khung danh s√°ch bi·ªÉn s·ªë ƒë√£ ƒëƒÉng k√Ω
        tree_container = tk.Frame(self.tab_register, bg="white", relief="ridge", bd=2)
        tree_container.pack(fill="both", expand=True, padx=10)
        
        # T·∫°o Treeview v·ªõi thanh cu·ªôn
        self.tree_reg = ttk.Treeview(tree_container, columns=("Bi·ªÉn s·ªë",), show="tree headings", height=18)
        self.tree_reg.heading("#0", text="STT", anchor="center")
        self.tree_reg.heading("Bi·ªÉn s·ªë", text="Bi·ªÉn s·ªë", anchor="center")
        
        self.tree_reg.column("#0", width=60, anchor="center", stretch=False)
        self.tree_reg.column("Bi·ªÉn s·ªë", width=300, anchor="w", stretch=True)
        
        tree_scroll = ttk.Scrollbar(tree_container, orient="vertical", command=self.tree_reg.yview)
        self.tree_reg.configure(yscrollcommand=tree_scroll.set)
        
        self.tree_reg.pack(side="left", fill="both", expand=True)
        tree_scroll.pack(side="right", fill="y")
        
        # Th√≠ch v·ªõi menu chu·ªôt ph·∫£i
        self.tree_reg.bind("<Button-3>", self._show_context_menu)
        
        self._reload_registered_table()

    def _add_registered_plate(self):
        plate = self.entry_reg.get().strip().upper()
        if not plate:
            messagebox.showwarning("Thi·∫øu d·ªØ li·ªáu", "Vui l√≤ng nh·∫≠p bi·ªÉn s·ªë.")
            return
        if append_registered(plate):
            messagebox.showinfo("Th√†nh c√¥ng", f"ƒê√£ th√™m {plate} v√†o {REGISTER_FILE}")
            self.entry_reg.delete(0, tk.END)
            self._reload_registered_table()
            self._refresh_registered_cache()
        else:
            messagebox.showwarning("Tr√πng", f"{plate} ƒë√£ c√≥ trong danh s√°ch ƒëƒÉng k√Ω.")

    def _reload_registered_table(self):
        # X√≥a c√°c h√†ng hi·ªán c√≥
        self.tree_reg.delete(*self.tree_reg.get_children())
        
        # Th√™m l·∫°i t·ª´ file
        plates = read_registered_list()
        for i, plate in enumerate(plates, 1):
            self.tree_reg.insert("", "end", text=str(i), values=(plate,))

    def _delete_selected_plates(self):
        # L·∫•y c√°c item ƒë∆∞·ª£c ch·ªçn
        selected_items = self.tree_reg.selection()
        if not selected_items:
            messagebox.showinfo("Th√¥ng b√°o", "Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt bi·ªÉn s·ªë ƒë·ªÉ x√≥a.")
            return
        
        # X√°c nh·∫≠n x√≥a
        if messagebox.askyesno("X√°c nh·∫≠n", f"B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a {len(selected_items)} bi·ªÉn s·ªë ƒë√£ ch·ªçn kh√¥ng?"):
            plates_to_delete = []
            for item in selected_items:
                plate = self.tree_reg.item(item)["values"][0]
                plates_to_delete.append(plate)
            
            # ƒê·ªçc danh s√°ch hi·ªán t·∫°i
            plates = read_registered_list()
            
            # X√≥a c√°c bi·ªÉn ƒë√£ ch·ªçn
            new_plates = [p for p in plates if p not in plates_to_delete]
            
            # Ghi l·∫°i v√†o file
            with open(REGISTER_FILE, "w", encoding="utf-8") as f:
                for p in new_plates:
                    f.write(p + "\n")
            
            # L√†m m·ªõi l·∫°i giao di·ªán
            self._reload_registered_table()
            self._refresh_registered_cache()
            messagebox.showinfo("Th√†nh c√¥ng", "ƒê√£ x√≥a c√°c bi·ªÉn s·ªë ƒë√£ ch·ªçn.")

    def _show_context_menu(self, event):
        # T·∫°o menu ng·ªØ c·∫£nh
        context_menu = tk.Menu(self, tearoff=0)
        context_menu.add_command(label="X√≥a", command=self._delete_selected_plates)
        context_menu.add_separator()
        context_menu.add_command(label="Sao ch√©p", command=lambda: self._copy_selected_plate(event))
        
        # Hi·ªÉn th·ªã menu t·∫°i v·ªã tr√≠ chu·ªôt
        try:
            context_menu.tk_popup(event.x_root, event.y_root)
        finally:
            context_menu.grab_release()
            
    def _copy_selected_plate(self, event):
        selected_items = self.tree_reg.selection()
        if selected_items:
            plate = self.tree_reg.item(selected_items[0])["values"][0]
            # Sao ch√©p v√†o clipboard
            self.clipboard_clear()
            self.clipboard_append(plate)
            messagebox.showinfo("Th√¥ng b√°o", f"ƒê√£ sao ch√©p bi·ªÉn s·ªë: {plate}")

    # --------- H·ª¶Y ---------
    def destroy(self):
        # Check if UI components are initialized before accessing them
        if self.ui_initialized:
            self.stop_camera()
        super().destroy()


if __name__ == "__main__":
    # G·ª£i √Ω c√†i ƒë·∫∑t:
    # pip install opencv-python torch torchvision pandas openpyxl pillow
    app = App()
    app.mainloop()