import tkinter as tk
from tkinter import messagebox
from PIL import Image, ImageTk
import os
import sys

# Th√™m ƒë∆∞·ªùng d·∫´n hi·ªán t·∫°i v√†o sys.path ƒë·ªÉ import module function
current_dir = os.path.dirname(os.path.abspath(__file__))
if current_dir not in sys.path:
    sys.path.insert(0, current_dir)

try:
    from function import utils_rotate
    from function import helper
except ImportError as e:
    print(f"L·ªói import module function: {e}")
    # T·∫°o c√°c h√†m gi·∫£ ƒë·ªÉ tr√°nh l·ªói
    class utils_rotate:
        @staticmethod
        def deskew(img, cc, ct):
            return img
    
    class helper:
        @staticmethod
        def read_plate(model, img):
            return "unknown"

class LoginApp(tk.Toplevel):
    def __init__(self, parent, config):
        super().__init__(parent)
        self.parent = parent
        self.config = config
        self.title("ƒêƒÉng nh·∫≠p h·ªá th·ªëng")
        self.geometry("500x400")
        self.resizable(False, False)
        
        # Thi·∫øt l·∫≠p bi·∫øn
        self.var_user = tk.StringVar()
        self.var_pass = tk.StringVar()
        self.logged_in = False
        
        # X√¢y d·ª±ng giao di·ªán
        self._build_ui()
        
        # L·∫•y focus v√†o c·ª≠a s·ªï
        self.transient(parent)
        self.grab_set()
        self.wait_window(self)
        
    def _build_ui(self):
        # T·∫°o n·ªÅn gradient
        self.canvas = tk.Canvas(self, width=500, height=400, highlightthickness=0)
        self.canvas.pack(fill="both", expand=True)
        
        # T·∫°o m√†u gradient
        for i in range(10):
            # S√°ng d·∫ßn t·ª´ tr√™n xu·ªëng d∆∞·ªõi
            color_val = 255 - i*25
            if color_val < 200: color_val = 200
            color = f'#{color_val:02x}{color_val:02x}{color_val:02x}'
            self.canvas.create_rectangle(0, i*40, 500, (i+1)*40, fill=color, outline=color)
        
        # Logo v√† form ƒëƒÉng nh·∫≠p
        logo_frame = tk.Frame(self, bg="#f5f5f5")
        logo_frame.place(relx=0.5, rely=0.2, anchor="center")
        
        # T·∫£i v√† hi·ªÉn th·ªã logo
        try:
            logo = Image.open("logo.png")  # C√≥ th·ªÉ thay th·∫ø b·∫±ng file logo th·ª±c t·∫ø
            logo = logo.resize((150, 150), Image.LANCZOS)
            logo_photo = ImageTk.PhotoImage(logo)
            logo_label = tk.Frame(logo_frame, bg="#f5f5f5")
            logo_label.pack(pady=10)
            tk.Label(logo_label, image=logo_photo, bg="#f5f5f5")
            logo_label.image = logo_photo  # Gi·ªØ tham chi·∫øu
        except:
            # N·∫øu kh√¥ng c√≥ file logo, hi·ªÉn th·ªã bi·ªÉu t∆∞·ª£ng vƒÉn b·∫£n
            tk.Label(logo_frame, text="üöó", font=("Arial", 80), bg="#f5f5f5").pack(pady=10)
        
        tk.Label(logo_frame, text="H·ªÜ TH·ªêNG ƒêI·ªÇM DANH XE", 
                font=("Arial", 18, "bold"), bg="#f5f5f5", fg="#2c3e50").pack(pady=5)
        
        # Form ƒëƒÉng nh·∫≠p
        login_container = tk.Frame(self, bg="white", relief="flat", bd=0)
        login_container.place(relx=0.5, rely=0.5, anchor="center")
        
        login_container_frame = tk.Frame(login_container, bg="white", relief="ridge", bd=2, padx=40, pady=40)
        login_container_frame.pack(padx=10, pady=10)
        
        tk.Label(login_container_frame, text="ƒêƒÉng nh·∫≠p", 
                font=("Arial", 20, "bold"), bg="white", fg="#2c3e50").grid(row=0, column=0, columnspan=2, pady=20)
        
        tk.Label(login_container_frame, text="T√†i kho·∫£n", font=("Arial", 12), bg="white", fg="#34495e").grid(row=1, column=0, padx=8, pady=8, sticky="e")
        tk.Label(login_container_frame, text="M·∫≠t kh·∫©u", font=("Arial", 12), bg="white", fg="#34495e").grid(row=2, column=0, padx=8, pady=8, sticky="e")
        
        e1 = tk.Entry(login_container_frame, textvariable=self.var_user, font=("Arial", 12), width=26)
        e2 = tk.Entry(login_container_frame, textvariable=self.var_pass, font=("Arial", 12), show="*", width=26)
        e1.grid(row=1, column=1, padx=8, pady=8)
        e2.grid(row=2, column=1, padx=8, pady=8)
        
        login_btn = tk.Button(login_container_frame, text="ƒêƒÉng nh·∫≠p", 
                            font=("Arial", 12, "bold"), bg="#27ae60", fg="white",
                            width=16, height=2, command=self._do_login)
        login_btn.grid(row=3, column=0, columnspan=2, pady=20)
        
        # Th√™m vƒÉn b·∫£n b·∫£n quy·ªÅn
        tk.Label(login_container_frame, text="¬© 2023 H·ªá th·ªëng ƒëi·ªÉm danh xe", 
                font=("Arial", 8), bg="white", fg="#95a5a6").grid(row=4, column=0, columnspan=2, pady=10)
    
    def _do_login(self):
        # L·∫•y gi√° tr·ªã v√† chu·∫©n h√≥a chu·ªói
        username = self.var_user.get().strip()
        password = self.var_pass.get().strip()
        
        # Ki·ªÉm tra tr·ªëng
        if not username or not password:
            messagebox.showerror("L·ªói", "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß t√†i kho·∫£n v√† m·∫≠t kh·∫©u!")
            return
            
        # So s√°nh tr·ª±c ti·∫øp v·ªõi th√¥ng tin ƒëƒÉng nh·∫≠p ƒë√£ ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a s·∫µn
        if username == self.config.LOGIN_USER and password == self.config.LOGIN_PASS:
            # ƒêƒÉng nh·∫≠p th√†nh c√¥ng
            self.logged_in = True
            self.destroy()
        else:
            # Th√¥ng b√°o chi ti·∫øt h∆°n khi ƒëƒÉng nh·∫≠p th·∫•t b·∫°i
            messagebox.showerror("L·ªói ƒëƒÉng nh·∫≠p", 
                              f"T√†i kho·∫£n ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng!\n\nTh√¥ng tin ƒëƒÉng nh·∫≠p ƒë√∫ng:\nT√†i kho·∫£n: {self.config.LOGIN_USER}\nM·∫≠t kh·∫©u: {self.config.LOGIN_PASS}")